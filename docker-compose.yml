version: "3"  

services:
  etcd:
    image: quay.io/coreos/etcd:v3.5.2
    entrypoint: /usr/local/bin/etcd
    restart: always
    volumes:
      - etcd_data:/etcd_data
    network_mode: host
    command: '-data-dir=/etcd-data --name etcd --initial-advertise-peer-urls http://${HostIP:-127.0.0.1}:2380 --listen-peer-urls http://0.0.0.0:2380 --advertise-client-urls http://${HostIP:-127.0.0.1}:2379 --listen-client-urls http://0.0.0.0:2379 --initial-cluster etcd=http://${HostIP:-127.0.0.1}:2380'

  redis:
    image: redis
    network_mode: host
    healthcheck:
      test: [ 'CMD', 'redis-cli', 'ping' ]
      interval: 3s
      timeout: 10s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.0.1
    container_name: zookeeper
    network_mode: host
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
#      ALLOW_ANONYMOUS_LOGIN: yes
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -nz 127.0.0.1 2181"]
      interval: 5s
      timeout: 5s
      retries: 120

  broker:
    image: confluentinc/cp-kafka:7.0.1
    container_name: broker
    network_mode: host
    # To learn about configuring Kafka for access across networks see
    # https://www.confluent.io/blog/kafka-client-cannot-connect-to-broker-on-aws-on-docker-etc/
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD", "sh", "-c", "nc -nz 127.0.0.1 9092"]
      interval: 5s
      timeout: 5s
      retries: 120


  mysql:
    build: db
    restart: always
    network_mode: host
    volumes:
      - mysql_data:/var/lib/mysql
    environment:
      MYSQL_ROOT_PASSWORD: 
      MYSQL_DATABASE: teamgram
      MYSQL_USER: teamgram
      MYSQL_PASSWORD: 
      MYSQL_ALLOW_EMPTY_PASSWORD: "true"
    healthcheck:
      test: "/etc/init.d/mysql status"
      interval: 5s
      timeout: 5s

  minio:
    image: minio/minio
    network_mode: host
    volumes:
      - minio_data:/data
    environment:
      MINIO_ACCESS_KEY: minio
      MINIO_SECRET_KEY: miniostorage
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
  
  teamgram:
    build: teamgram-server
    network_mode: host
    depends_on:
#      etcd
#        condition: service_healthy
      redis:
        condition: service_healthy
      broker:  
        condition: service_healthy
      mysql:
        condition: service_healthy
      minio:
        condition: service_healthy
volumes:
  minio_data:
  etcd_data:
  mysql_data:

